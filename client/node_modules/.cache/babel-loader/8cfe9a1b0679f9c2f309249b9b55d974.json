{"ast":null,"code":"import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, base64Decode, getDefaultAppConfig, deepEqual, isBrowser, isWebWorker, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass PlatformLoggerServiceImpl {\n  constructor(container) {\n    this.container = container;\n  } // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n\n\n  getPlatformInfoString() {\n    const providers = this.container.getProviders(); // Loop through providers and get library/version pairs from any that are\n    // version components.\n\n    return providers.map(provider => {\n      if (isVersionServiceProvider(provider)) {\n        const service = provider.getImmediate();\n        return `${service.library}/${service.version}`;\n      } else {\n        return null;\n      }\n    }).filter(logString => logString).join(' ');\n  }\n\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\n\n\nfunction isVersionServiceProvider(provider) {\n  const component = provider.getComponent();\n  return component?.type === \"VERSION\"\n  /* ComponentType.VERSION */\n  ;\n}\n\nconst name$q = \"@firebase/app\";\nconst version$1 = \"0.14.3\";\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst logger = new Logger('@firebase/app');\nconst name$p = \"@firebase/app-compat\";\nconst name$o = \"@firebase/analytics-compat\";\nconst name$n = \"@firebase/analytics\";\nconst name$m = \"@firebase/app-check-compat\";\nconst name$l = \"@firebase/app-check\";\nconst name$k = \"@firebase/auth\";\nconst name$j = \"@firebase/auth-compat\";\nconst name$i = \"@firebase/database\";\nconst name$h = \"@firebase/data-connect\";\nconst name$g = \"@firebase/database-compat\";\nconst name$f = \"@firebase/functions\";\nconst name$e = \"@firebase/functions-compat\";\nconst name$d = \"@firebase/installations\";\nconst name$c = \"@firebase/installations-compat\";\nconst name$b = \"@firebase/messaging\";\nconst name$a = \"@firebase/messaging-compat\";\nconst name$9 = \"@firebase/performance\";\nconst name$8 = \"@firebase/performance-compat\";\nconst name$7 = \"@firebase/remote-config\";\nconst name$6 = \"@firebase/remote-config-compat\";\nconst name$5 = \"@firebase/storage\";\nconst name$4 = \"@firebase/storage-compat\";\nconst name$3 = \"@firebase/firestore\";\nconst name$2 = \"@firebase/ai\";\nconst name$1 = \"@firebase/firestore-compat\";\nconst name = \"firebase\";\nconst version = \"12.3.0\";\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The default app name\n *\n * @internal\n */\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\nconst PLATFORM_LOG_STRING = {\n  [name$q]: 'fire-core',\n  [name$p]: 'fire-core-compat',\n  [name$n]: 'fire-analytics',\n  [name$o]: 'fire-analytics-compat',\n  [name$l]: 'fire-app-check',\n  [name$m]: 'fire-app-check-compat',\n  [name$k]: 'fire-auth',\n  [name$j]: 'fire-auth-compat',\n  [name$i]: 'fire-rtdb',\n  [name$h]: 'fire-data-connect',\n  [name$g]: 'fire-rtdb-compat',\n  [name$f]: 'fire-fn',\n  [name$e]: 'fire-fn-compat',\n  [name$d]: 'fire-iid',\n  [name$c]: 'fire-iid-compat',\n  [name$b]: 'fire-fcm',\n  [name$a]: 'fire-fcm-compat',\n  [name$9]: 'fire-perf',\n  [name$8]: 'fire-perf-compat',\n  [name$7]: 'fire-rc',\n  [name$6]: 'fire-rc-compat',\n  [name$5]: 'fire-gcs',\n  [name$4]: 'fire-gcs-compat',\n  [name$3]: 'fire-fst',\n  [name$1]: 'fire-fst-compat',\n  [name$2]: 'fire-vertex',\n  'fire-js': 'fire-js',\n  // Platform identifier for JS SDK.\n  [name]: 'fire-js-all'\n};\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @internal\n */\n\nconst _apps = new Map();\n/**\n * @internal\n */\n\n\nconst _serverApps = new Map();\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nconst _components = new Map();\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\n\n\nfunction _addComponent(app, component) {\n  try {\n    app.container.addComponent(component);\n  } catch (e) {\n    logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\n  }\n}\n/**\n *\n * @internal\n */\n\n\nfunction _addOrOverwriteComponent(app, component) {\n  app.container.addOrOverwriteComponent(component);\n}\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\n\n\nfunction _registerComponent(component) {\n  const componentName = component.name;\n\n  if (_components.has(componentName)) {\n    logger.debug(`There were multiple attempts to register component ${componentName}.`);\n    return false;\n  }\n\n  _components.set(componentName, component); // add the component to existing app instances\n\n\n  for (const app of _apps.values()) {\n    _addComponent(app, component);\n  }\n\n  for (const serverApp of _serverApps.values()) {\n    _addComponent(serverApp, component);\n  }\n\n  return true;\n}\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\n\n\nfunction _getProvider(app, name) {\n  const heartbeatController = app.container.getProvider('heartbeat').getImmediate({\n    optional: true\n  });\n\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n\n  return app.container.getProvider(name);\n}\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\n\n\nfunction _removeServiceInstance(app, name) {\n  let instanceIdentifier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ENTRY_NAME;\n\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n/**\n *\n * @param obj - an object of type FirebaseApp, FirebaseOptions or FirebaseAppSettings.\n *\n * @returns true if the provide object is of type FirebaseApp.\n *\n * @internal\n */\n\n\nfunction _isFirebaseApp(obj) {\n  return obj.options !== undefined;\n}\n/**\n *\n * @param obj - an object of type FirebaseApp, FirebaseOptions or FirebaseAppSettings.\n *\n * @returns true if the provided object is of type FirebaseServerAppImpl.\n *\n * @internal\n */\n\n\nfunction _isFirebaseServerAppSettings(obj) {\n  if (_isFirebaseApp(obj)) {\n    return false;\n  }\n\n  return 'authIdToken' in obj || 'appCheckToken' in obj || 'releaseOnDeref' in obj || 'automaticDataCollectionEnabled' in obj;\n}\n/**\n *\n * @param obj - an object of type FirebaseApp.\n *\n * @returns true if the provided object is of type FirebaseServerAppImpl.\n *\n * @internal\n */\n\n\nfunction _isFirebaseServerApp(obj) {\n  if (obj === null || obj === undefined) {\n    return false;\n  }\n\n  return obj.settings !== undefined;\n}\n/**\n * Test only\n *\n * @internal\n */\n\n\nfunction _clearComponents() {\n  _components.clear();\n}\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst ERRORS = {\n  [\"no-app\"\n  /* AppError.NO_APP */\n  ]: \"No Firebase App '{$appName}' has been created - \" + 'call initializeApp() first',\n  [\"bad-app-name\"\n  /* AppError.BAD_APP_NAME */\n  ]: \"Illegal App name: '{$appName}'\",\n  [\"duplicate-app\"\n  /* AppError.DUPLICATE_APP */\n  ]: \"Firebase App named '{$appName}' already exists with different options or config\",\n  [\"app-deleted\"\n  /* AppError.APP_DELETED */\n  ]: \"Firebase App named '{$appName}' already deleted\",\n  [\"server-app-deleted\"\n  /* AppError.SERVER_APP_DELETED */\n  ]: 'Firebase Server App has been deleted',\n  [\"no-options\"\n  /* AppError.NO_OPTIONS */\n  ]: 'Need to provide options, when not being deployed to hosting via source.',\n  [\"invalid-app-argument\"\n  /* AppError.INVALID_APP_ARGUMENT */\n  ]: 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.',\n  [\"invalid-log-argument\"\n  /* AppError.INVALID_LOG_ARGUMENT */\n  ]: 'First argument to `onLog` must be null or a function.',\n  [\"idb-open\"\n  /* AppError.IDB_OPEN */\n  ]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-get\"\n  /* AppError.IDB_GET */\n  ]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-set\"\n  /* AppError.IDB_WRITE */\n  ]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-delete\"\n  /* AppError.IDB_DELETE */\n  ]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"finalization-registry-not-supported\"\n  /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */\n  ]: 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',\n  [\"invalid-server-app-environment\"\n  /* AppError.INVALID_SERVER_APP_ENVIRONMENT */\n  ]: 'FirebaseServerApp is not for use in browser environments.'\n};\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass FirebaseAppImpl {\n  constructor(options, config, container) {\n    this._isDeleted = false;\n    this._options = { ...options\n    };\n    this._config = { ...config\n    };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(new Component('app', () => this, \"PUBLIC\"\n    /* ComponentType.PUBLIC */\n    ));\n  }\n\n  get automaticDataCollectionEnabled() {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name() {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options() {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config() {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container() {\n    return this._container;\n  }\n\n  get isDeleted() {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val) {\n    this._isDeleted = val;\n  }\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n\n\n  checkDestroyed() {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(\"app-deleted\"\n      /* AppError.APP_DELETED */\n      , {\n        appName: this._name\n      });\n    }\n  }\n\n}\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Parse the token and check to see if the `exp` claim is in the future.\n// Reports an error to the console if the token or claim could not be parsed, or if `exp` is in\n// the past.\n\n\nfunction validateTokenTTL(base64Token, tokenName) {\n  const secondPart = base64Decode(base64Token.split('.')[1]);\n\n  if (secondPart === null) {\n    console.error(`FirebaseServerApp ${tokenName} is invalid: second part could not be parsed.`);\n    return;\n  }\n\n  const expClaim = JSON.parse(secondPart).exp;\n\n  if (expClaim === undefined) {\n    console.error(`FirebaseServerApp ${tokenName} is invalid: expiration claim could not be parsed`);\n    return;\n  }\n\n  const exp = JSON.parse(secondPart).exp * 1000;\n  const now = new Date().getTime();\n  const diff = exp - now;\n\n  if (diff <= 0) {\n    console.error(`FirebaseServerApp ${tokenName} is invalid: the token has expired.`);\n  }\n}\n\nclass FirebaseServerAppImpl extends FirebaseAppImpl {\n  constructor(options, serverConfig, name, container) {\n    // Build configuration parameters for the FirebaseAppImpl base class.\n    const automaticDataCollectionEnabled = serverConfig.automaticDataCollectionEnabled !== undefined ? serverConfig.automaticDataCollectionEnabled : true; // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.\n\n    const config = {\n      name,\n      automaticDataCollectionEnabled\n    };\n\n    if (options.apiKey !== undefined) {\n      // Construct the parent FirebaseAppImp object.\n      super(options, config, container);\n    } else {\n      const appImpl = options;\n      super(appImpl.options, config, container);\n    } // Now construct the data for the FirebaseServerAppImpl.\n\n\n    this._serverConfig = {\n      automaticDataCollectionEnabled,\n      ...serverConfig\n    }; // Ensure that the current time is within the `authIdtoken` window of validity.\n\n    if (this._serverConfig.authIdToken) {\n      validateTokenTTL(this._serverConfig.authIdToken, 'authIdToken');\n    } // Ensure that the current time is within the `appCheckToken` window of validity.\n\n\n    if (this._serverConfig.appCheckToken) {\n      validateTokenTTL(this._serverConfig.appCheckToken, 'appCheckToken');\n    }\n\n    this._finalizationRegistry = null;\n\n    if (typeof FinalizationRegistry !== 'undefined') {\n      this._finalizationRegistry = new FinalizationRegistry(() => {\n        this.automaticCleanup();\n      });\n    }\n\n    this._refCount = 0;\n    this.incRefCount(this._serverConfig.releaseOnDeref); // Do not retain a hard reference to the dref object, otherwise the FinalizationRegistry\n    // will never trigger.\n\n    this._serverConfig.releaseOnDeref = undefined;\n    serverConfig.releaseOnDeref = undefined;\n    registerVersion(name$q, version$1, 'serverapp');\n  }\n\n  toJSON() {\n    return undefined;\n  }\n\n  get refCount() {\n    return this._refCount;\n  } // Increment the reference count of this server app. If an object is provided, register it\n  // with the finalization registry.\n\n\n  incRefCount(obj) {\n    if (this.isDeleted) {\n      return;\n    }\n\n    this._refCount++;\n\n    if (obj !== undefined && this._finalizationRegistry !== null) {\n      this._finalizationRegistry.register(obj, this);\n    }\n  } // Decrement the reference count.\n\n\n  decRefCount() {\n    if (this.isDeleted) {\n      return 0;\n    }\n\n    return --this._refCount;\n  } // Invoked by the FinalizationRegistry callback to note that this app should go through its\n  // reference counts and delete itself if no reference count remain. The coordinating logic that\n  // handles this is in deleteApp(...).\n\n\n  automaticCleanup() {\n    void deleteApp(this);\n  }\n\n  get settings() {\n    this.checkDestroyed();\n    return this._serverConfig;\n  }\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n\n\n  checkDestroyed() {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(\"server-app-deleted\"\n      /* AppError.SERVER_APP_DELETED */\n      );\n    }\n  }\n\n}\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The current SDK version.\n *\n * @public\n */\n\n\nconst SDK_VERSION = version;\n\nfunction initializeApp(_options) {\n  let rawConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = {\n      name\n    };\n  }\n\n  const config = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: true,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(\"bad-app-name\"\n    /* AppError.BAD_APP_NAME */\n    , {\n      appName: String(name)\n    });\n  }\n\n  options || (options = getDefaultAppConfig());\n\n  if (!options) {\n    throw ERROR_FACTORY.create(\"no-options\"\n    /* AppError.NO_OPTIONS */\n    );\n  }\n\n  const existingApp = _apps.get(name);\n\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (deepEqual(options, existingApp.options) && deepEqual(config, existingApp.config)) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(\"duplicate-app\"\n      /* AppError.DUPLICATE_APP */\n      , {\n        appName: name\n      });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\nfunction initializeServerApp(_options) {\n  let _serverAppConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (isBrowser() && !isWebWorker()) {\n    // FirebaseServerApp isn't designed to be run in browsers.\n    throw ERROR_FACTORY.create(\"invalid-server-app-environment\"\n    /* AppError.INVALID_SERVER_APP_ENVIRONMENT */\n    );\n  }\n\n  let firebaseOptions;\n  let serverAppSettings = _serverAppConfig || {};\n\n  if (_options) {\n    if (_isFirebaseApp(_options)) {\n      firebaseOptions = _options.options;\n    } else if (_isFirebaseServerAppSettings(_options)) {\n      serverAppSettings = _options;\n    } else {\n      firebaseOptions = _options;\n    }\n  }\n\n  if (serverAppSettings.automaticDataCollectionEnabled === undefined) {\n    serverAppSettings.automaticDataCollectionEnabled = true;\n  }\n\n  firebaseOptions || (firebaseOptions = getDefaultAppConfig());\n\n  if (!firebaseOptions) {\n    throw ERROR_FACTORY.create(\"no-options\"\n    /* AppError.NO_OPTIONS */\n    );\n  } // Build an app name based on a hash of the configuration options.\n\n\n  const nameObj = { ...serverAppSettings,\n    ...firebaseOptions\n  }; // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\n  // construction of FirebaseServerApp instances. For example, if the object is the request headers.\n\n  if (nameObj.releaseOnDeref !== undefined) {\n    delete nameObj.releaseOnDeref;\n  }\n\n  const hashCode = s => {\n    return [...s].reduce((hash, c) => Math.imul(31, hash) + c.charCodeAt(0) | 0, 0);\n  };\n\n  if (serverAppSettings.releaseOnDeref !== undefined) {\n    if (typeof FinalizationRegistry === 'undefined') {\n      throw ERROR_FACTORY.create(\"finalization-registry-not-supported\"\n      /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */\n      , {});\n    }\n  }\n\n  const nameString = '' + hashCode(JSON.stringify(nameObj));\n\n  const existingApp = _serverApps.get(nameString);\n\n  if (existingApp) {\n    existingApp.incRefCount(serverAppSettings.releaseOnDeref);\n    return existingApp;\n  }\n\n  const container = new ComponentContainer(nameString);\n\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseServerAppImpl(firebaseOptions, serverAppSettings, nameString, container);\n\n  _serverApps.set(nameString, newApp);\n\n  return newApp;\n}\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\n\n\nfunction getApp() {\n  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n\n  const app = _apps.get(name);\n\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n\n  if (!app) {\n    throw ERROR_FACTORY.create(\"no-app\"\n    /* AppError.NO_APP */\n    , {\n      appName: name\n    });\n  }\n\n  return app;\n}\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\n\n\nfunction getApps() {\n  return Array.from(_apps.values());\n}\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\n\n\nasync function deleteApp(app) {\n  let cleanupProviders = false;\n  const name = app.name;\n\n  if (_apps.has(name)) {\n    cleanupProviders = true;\n\n    _apps.delete(name);\n  } else if (_serverApps.has(name)) {\n    const firebaseServerApp = app;\n\n    if (firebaseServerApp.decRefCount() <= 0) {\n      _serverApps.delete(name);\n\n      cleanupProviders = true;\n    }\n  }\n\n  if (cleanupProviders) {\n    await Promise.all(app.container.getProviders().map(provider => provider.delete()));\n    app.isDeleted = true;\n  }\n}\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\n\n\nfunction registerVersion(libraryKeyOrName, version, variant) {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n\n  if (variant) {\n    library += `-${variant}`;\n  }\n\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n\n  if (libraryMismatch || versionMismatch) {\n    const warning = [`Unable to register library \"${library}\" with version \"${version}\":`];\n\n    if (libraryMismatch) {\n      warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\n    }\n\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n\n    if (versionMismatch) {\n      warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\n    }\n\n    logger.warn(warning.join(' '));\n    return;\n  }\n\n  _registerComponent(new Component(`${library}-version`, () => ({\n    library,\n    version\n  }), \"VERSION\"\n  /* ComponentType.VERSION */\n  ));\n}\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\n\n\nfunction onLog(logCallback, options) {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(\"invalid-log-argument\"\n    /* AppError.INVALID_LOG_ARGUMENT */\n    );\n  }\n\n  setUserLogHandler(logCallback, options);\n}\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\n\n\nfunction setLogLevel(logLevel) {\n  setLogLevel$1(logLevel);\n}\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(\"idb-open\"\n      /* AppError.IDB_OPEN */\n      , {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n\n  return dbPromise;\n}\n\nasync function readHeartbeatsFromIndexedDB(app) {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME);\n    const result = await tx.objectStore(STORE_NAME).get(computeKey(app)); // We already have the value but tx.done can throw,\n    // so we need to await it here to catch errors\n\n    await tx.done;\n    return result;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(\"idb-get\"\n      /* AppError.IDB_GET */\n      , {\n        originalErrorMessage: e?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    await tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(\"idb-set\"\n      /* AppError.IDB_WRITE */\n      , {\n        originalErrorMessage: e?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app) {\n  return `${app.name}!${app.options.appId}`;\n}\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst MAX_HEADER_BYTES = 1024;\nconst MAX_NUM_STORED_HEARTBEATS = 30;\n\nclass HeartbeatServiceImpl {\n  constructor(container) {\n    this.container = container;\n    /**\n     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n     * the header string.\n     * Stores one record per date. This will be consolidated into the standard\n     * format of one record per user agent string before being sent as a header.\n     * Populated from indexedDB when the controller is instantiated and should\n     * be kept in sync with indexedDB.\n     * Leave public for easier testing.\n     */\n\n    this._heartbeatsCache = null;\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n\n\n  async triggerHeartbeat() {\n    try {\n      const platformLogger = this.container.getProvider('platform-logger').getImmediate(); // This is the \"Firebase user agent\" string from the platform logger\n      // service, not the browser user agent.\n\n      const agent = platformLogger.getPlatformInfoString();\n      const date = getUTCDateString();\n\n      if (this._heartbeatsCache?.heartbeats == null) {\n        this._heartbeatsCache = await this._heartbeatsCachePromise; // If we failed to construct a heartbeats cache, then return immediately.\n\n        if (this._heartbeatsCache?.heartbeats == null) {\n          return;\n        }\n      } // Do not store a heartbeat if one is already stored for this day\n      // or if a header has already been sent today.\n\n\n      if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\n        return;\n      } else {\n        // There is no entry for this date. Create one.\n        this._heartbeatsCache.heartbeats.push({\n          date,\n          agent\n        }); // If the number of stored heartbeats exceeds the maximum number of stored heartbeats, remove the heartbeat with the earliest date.\n        // Since this is executed each time a heartbeat is pushed, the limit can only be exceeded by one, so only one needs to be removed.\n\n\n        if (this._heartbeatsCache.heartbeats.length > MAX_NUM_STORED_HEARTBEATS) {\n          const earliestHeartbeatIdx = getEarliestHeartbeatIdx(this._heartbeatsCache.heartbeats);\n\n          this._heartbeatsCache.heartbeats.splice(earliestHeartbeatIdx, 1);\n        }\n      }\n\n      return this._storage.overwrite(this._heartbeatsCache);\n    } catch (e) {\n      logger.warn(e);\n    }\n  }\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n\n\n  async getHeartbeatsHeader() {\n    try {\n      if (this._heartbeatsCache === null) {\n        await this._heartbeatsCachePromise;\n      } // If it's still null or the array is empty, there is no data to send.\n\n\n      if (this._heartbeatsCache?.heartbeats == null || this._heartbeatsCache.heartbeats.length === 0) {\n        return '';\n      }\n\n      const date = getUTCDateString(); // Extract as many heartbeats from the cache as will fit under the size limit.\n\n      const {\n        heartbeatsToSend,\n        unsentEntries\n      } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\n      const headerString = base64urlEncodeWithoutPadding(JSON.stringify({\n        version: 2,\n        heartbeats: heartbeatsToSend\n      })); // Store last sent date to prevent another being logged/sent for the same day.\n\n      this._heartbeatsCache.lastSentHeartbeatDate = date;\n\n      if (unsentEntries.length > 0) {\n        // Store any unsent entries if they exist.\n        this._heartbeatsCache.heartbeats = unsentEntries; // This seems more likely than emptying the array (below) to lead to some odd state\n        // since the cache isn't empty and this will be called again on the next request,\n        // and is probably safest if we await it.\n\n        await this._storage.overwrite(this._heartbeatsCache);\n      } else {\n        this._heartbeatsCache.heartbeats = []; // Do not wait for this, to reduce latency.\n\n        void this._storage.overwrite(this._heartbeatsCache);\n      }\n\n      return headerString;\n    } catch (e) {\n      logger.warn(e);\n      return '';\n    }\n  }\n\n}\n\nfunction getUTCDateString() {\n  const today = new Date(); // Returns date format 'YYYY-MM-DD'\n\n  return today.toISOString().substring(0, 10);\n}\n\nfunction extractHeartbeatsForHeader(heartbeatsCache) {\n  let maxSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_HEADER_BYTES;\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend = []; // Single date format heartbeats that are not sent.\n\n  let unsentEntries = heartbeatsCache.slice();\n\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\n\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date); // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    } // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n\n\n    unsentEntries = unsentEntries.slice(1);\n  }\n\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nclass HeartbeatStorageImpl {\n  constructor(app) {\n    this.app = app;\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n\n  async runIndexedDBEnvironmentCheck() {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable().then(() => true).catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n\n\n  async read() {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n\n    if (!canUseIndexedDB) {\n      return {\n        heartbeats: []\n      };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n\n      if (idbHeartbeatObject?.heartbeats) {\n        return idbHeartbeatObject;\n      } else {\n        return {\n          heartbeats: []\n        };\n      }\n    }\n  } // overwrite the storage with the provided heartbeats\n\n\n  async overwrite(heartbeatsObject) {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate: heartbeatsObject.lastSentHeartbeatDate ?? existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  } // add heartbeats\n\n\n  async add(heartbeatsObject) {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate: heartbeatsObject.lastSentHeartbeatDate ?? existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [...existingHeartbeatsObject.heartbeats, ...heartbeatsObject.heartbeats]\n      });\n    }\n  }\n\n}\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\n\n\nfunction countBytes(heartbeatsCache) {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding( // heartbeatsCache wrapper properties\n  JSON.stringify({\n    version: 2,\n    heartbeats: heartbeatsCache\n  })).length;\n}\n/**\n * Returns the index of the heartbeat with the earliest date.\n * If the heartbeats array is empty, -1 is returned.\n */\n\n\nfunction getEarliestHeartbeatIdx(heartbeats) {\n  if (heartbeats.length === 0) {\n    return -1;\n  }\n\n  let earliestHeartbeatIdx = 0;\n  let earliestHeartbeatDate = heartbeats[0].date;\n\n  for (let i = 1; i < heartbeats.length; i++) {\n    if (heartbeats[i].date < earliestHeartbeatDate) {\n      earliestHeartbeatDate = heartbeats[i].date;\n      earliestHeartbeatIdx = i;\n    }\n  }\n\n  return earliestHeartbeatIdx;\n}\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction registerCoreComponents(variant) {\n  _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\"\n  /* ComponentType.PRIVATE */\n  ));\n\n  _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\"\n  /* ComponentType.PRIVATE */\n  )); // Register `app` package.\n\n\n  registerVersion(name$q, version$1, variant); // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n\n  registerVersion(name$q, version$1, 'esm2020'); // Register platform SDK identifier (no version).\n\n  registerVersion('fire-js', '');\n}\n/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n\nregisterCoreComponents('');\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _isFirebaseApp, _isFirebaseServerApp, _isFirebaseServerAppSettings, _registerComponent, _removeServiceInstance, _serverApps, deleteApp, getApp, getApps, initializeApp, initializeServerApp, onLog, registerVersion, setLogLevel };","map":{"version":3,"mappings":"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","names":["PlatformLoggerServiceImpl","constructor","container","getPlatformInfoString","providers","getProviders","map","provider","isVersionServiceProvider","service","getImmediate","library","version","filter","logString","join","component","getComponent","type","logger","Logger","DEFAULT_ENTRY_NAME","PLATFORM_LOG_STRING","appName","appCompatName","analyticsName","analyticsCompatName","appCheckName","appCheckCompatName","authName","authCompatName","databaseName","dataconnectName","databaseCompatName","functionsName","functionsCompatName","installationsName","installationsCompatName","messagingName","messagingCompatName","performanceName","performanceCompatName","remoteConfigName","remoteConfigCompatName","storageName","storageCompatName","firestoreName","firestoreCompatName","aiName","packageName","Map","app","addComponent","e","debug","name","addOrOverwriteComponent","_registerComponent","componentName","_components","has","set","_apps","values","_addComponent","serverApp","_serverApps","heartbeatController","getProvider","optional","triggerHeartbeat","_removeServiceInstance","instanceIdentifier","_getProvider","clearInstance","_isFirebaseApp","obj","options","undefined","_isFirebaseServerAppSettings","_isFirebaseServerApp","settings","_clearComponents","clear","ERRORS","ERROR_FACTORY","ErrorFactory","FirebaseAppImpl","config","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","Component","checkDestroyed","val","isDeleted","create","validateTokenTTL","base64Token","tokenName","secondPart","base64Decode","split","console","error","expClaim","JSON","parse","exp","now","Date","getTime","diff","FirebaseServerAppImpl","serverConfig","apiKey","appImpl","_serverConfig","authIdToken","appCheckToken","_finalizationRegistry","FinalizationRegistry","automaticCleanup","_refCount","incRefCount","releaseOnDeref","registerVersion","toJSON","refCount","register","decRefCount","deleteApp","SDK_VERSION","initializeApp","rawConfig","String","getDefaultAppConfig","existingApp","get","deepEqual","ComponentContainer","newApp","initializeServerApp","_serverAppConfig","isBrowser","isWebWorker","firebaseOptions","serverAppSettings","nameObj","hashCode","s","reduce","hash","c","Math","imul","charCodeAt","nameString","stringify","getApps","Array","from","cleanupProviders","delete","firebaseServerApp","Promise","all","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","push","warn","logCallback","setUserLogHandler","setLogLevel","logLevel","setLogLevelImpl","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","openDB","upgrade","db","oldVersion","createObjectStore","catch","originalErrorMessage","message","readHeartbeatsFromIndexedDB","tx","transaction","result","objectStore","computeKey","done","FirebaseError","idbGetError","writeHeartbeatsToIndexedDB","heartbeatObject","put","appId","MAX_HEADER_BYTES","MAX_NUM_STORED_HEARTBEATS","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","then","platformLogger","agent","date","getUTCDateString","heartbeats","lastSentHeartbeatDate","some","singleDateHeartbeat","length","earliestHeartbeatIdx","getEarliestHeartbeatIdx","splice","overwrite","getHeartbeatsHeader","heartbeatsToSend","unsentEntries","extractHeartbeatsForHeader","headerString","base64urlEncodeWithoutPadding","today","toISOString","substring","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","isIndexedDBAvailable","validateIndexedDBOpenable","canUseIndexedDB","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","add","earliestHeartbeatDate","i","registerCoreComponents"],"sources":["C:\\Users\\Amarjeet Kumar\\Desktop\\task\\final\\client\\node_modules\\@firebase\\app\\src\\platformLoggerService.ts","C:\\Users\\Amarjeet Kumar\\Desktop\\task\\final\\client\\node_modules\\@firebase\\app\\src\\logger.ts","C:\\Users\\Amarjeet Kumar\\Desktop\\task\\final\\client\\node_modules\\@firebase\\app\\src\\constants.ts","C:\\Users\\Amarjeet Kumar\\Desktop\\task\\final\\client\\node_modules\\@firebase\\app\\src\\internal.ts","C:\\Users\\Amarjeet Kumar\\Desktop\\task\\final\\client\\node_modules\\@firebase\\app\\src\\errors.ts","C:\\Users\\Amarjeet Kumar\\Desktop\\task\\final\\client\\node_modules\\@firebase\\app\\src\\firebaseApp.ts","C:\\Users\\Amarjeet Kumar\\Desktop\\task\\final\\client\\node_modules\\@firebase\\app\\src\\firebaseServerApp.ts","C:\\Users\\Amarjeet Kumar\\Desktop\\task\\final\\client\\node_modules\\@firebase\\app\\src\\api.ts","C:\\Users\\Amarjeet Kumar\\Desktop\\task\\final\\client\\node_modules\\@firebase\\app\\src\\indexeddb.ts","C:\\Users\\Amarjeet Kumar\\Desktop\\task\\final\\client\\node_modules\\@firebase\\app\\src\\heartbeatService.ts","C:\\Users\\Amarjeet Kumar\\Desktop\\task\\final\\client\\node_modules\\@firebase\\app\\src\\registerCoreComponents.ts","C:\\Users\\Amarjeet Kumar\\Desktop\\task\\final\\client\\node_modules\\@firebase\\app\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as dataconnectName } from '../../../packages/data-connect/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as aiName } from '../../../packages/ai/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [dataconnectName]: 'fire-data-connect',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  [aiName]: 'fire-vertex',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseAppSettings,\n  FirebaseServerAppSettings,\n  FirebaseOptions,\n  FirebaseServerApp\n} from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * @internal\n */\nexport const _serverApps = new Map<string, FirebaseServerApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  for (const serverApp of _serverApps.values()) {\n    _addComponent(serverApp as FirebaseServerAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp, FirebaseOptions or FirebaseAppSettings.\n *\n * @returns true if the provide object is of type FirebaseApp.\n *\n * @internal\n */\nexport function _isFirebaseApp(\n  obj: FirebaseApp | FirebaseOptions | FirebaseAppSettings\n): obj is FirebaseApp {\n  return (obj as FirebaseApp).options !== undefined;\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp, FirebaseOptions or FirebaseAppSettings.\n *\n * @returns true if the provided object is of type FirebaseServerAppImpl.\n *\n * @internal\n */\nexport function _isFirebaseServerAppSettings(\n  obj: FirebaseApp | FirebaseOptions | FirebaseAppSettings\n): obj is FirebaseServerAppSettings {\n  if (_isFirebaseApp(obj)) {\n    return false;\n  }\n  return (\n    'authIdToken' in obj ||\n    'appCheckToken' in obj ||\n    'releaseOnDeref' in obj ||\n    'automaticDataCollectionEnabled' in obj\n  );\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp.\n *\n * @returns true if the provided object is of type FirebaseServerAppImpl.\n *\n * @internal\n */\nexport function _isFirebaseServerApp(\n  obj: FirebaseApp | FirebaseServerApp | null | undefined\n): obj is FirebaseServerApp {\n  if (obj === null || obj === undefined) {\n    return false;\n  }\n  return (obj as FirebaseServerApp).settings !== undefined;\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  SERVER_APP_DELETED = 'server-app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete',\n  FINALIZATION_REGISTRY_NOT_SUPPORTED = 'finalization-registry-not-supported',\n  INVALID_SERVER_APP_ENVIRONMENT = 'invalid-server-app-environment'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call initializeApp() first',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}'\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.SERVER_APP_DELETED]: 'Firebase Server App has been deleted',\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]:\n    'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',\n  [AppError.INVALID_SERVER_APP_ENVIRONMENT]:\n    'FirebaseServerApp is not for use in browser environments.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]: { appName?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  protected readonly _options: FirebaseOptions;\n  protected readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  protected _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAppSettings,\n  FirebaseServerApp,\n  FirebaseServerAppSettings,\n  FirebaseOptions\n} from './public-types';\nimport { deleteApp, registerVersion } from './api';\nimport { ComponentContainer } from '@firebase/component';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport { name as packageName, version } from '../package.json';\nimport { base64Decode } from '@firebase/util';\n\n// Parse the token and check to see if the `exp` claim is in the future.\n// Reports an error to the console if the token or claim could not be parsed, or if `exp` is in\n// the past.\nfunction validateTokenTTL(base64Token: string, tokenName: string): void {\n  const secondPart = base64Decode(base64Token.split('.')[1]);\n  if (secondPart === null) {\n    console.error(\n      `FirebaseServerApp ${tokenName} is invalid: second part could not be parsed.`\n    );\n    return;\n  }\n  const expClaim = JSON.parse(secondPart).exp;\n  if (expClaim === undefined) {\n    console.error(\n      `FirebaseServerApp ${tokenName} is invalid: expiration claim could not be parsed`\n    );\n    return;\n  }\n  const exp = JSON.parse(secondPart).exp * 1000;\n  const now = new Date().getTime();\n  const diff = exp - now;\n  if (diff <= 0) {\n    console.error(\n      `FirebaseServerApp ${tokenName} is invalid: the token has expired.`\n    );\n  }\n}\n\nexport class FirebaseServerAppImpl\n  extends FirebaseAppImpl\n  implements FirebaseServerApp\n{\n  private readonly _serverConfig: FirebaseServerAppSettings;\n  private _finalizationRegistry: FinalizationRegistry<object> | null;\n  private _refCount: number;\n\n  constructor(\n    options: FirebaseOptions | FirebaseAppImpl,\n    serverConfig: FirebaseServerAppSettings,\n    name: string,\n    container: ComponentContainer\n  ) {\n    // Build configuration parameters for the FirebaseAppImpl base class.\n    const automaticDataCollectionEnabled =\n      serverConfig.automaticDataCollectionEnabled !== undefined\n        ? serverConfig.automaticDataCollectionEnabled\n        : true;\n\n    // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.\n    const config: Required<FirebaseAppSettings> = {\n      name,\n      automaticDataCollectionEnabled\n    };\n\n    if ((options as FirebaseOptions).apiKey !== undefined) {\n      // Construct the parent FirebaseAppImp object.\n      super(options as FirebaseOptions, config, container);\n    } else {\n      const appImpl: FirebaseAppImpl = options as FirebaseAppImpl;\n      super(appImpl.options, config, container);\n    }\n\n    // Now construct the data for the FirebaseServerAppImpl.\n    this._serverConfig = {\n      automaticDataCollectionEnabled,\n      ...serverConfig\n    };\n\n    // Ensure that the current time is within the `authIdtoken` window of validity.\n    if (this._serverConfig.authIdToken) {\n      validateTokenTTL(this._serverConfig.authIdToken, 'authIdToken');\n    }\n\n    // Ensure that the current time is within the `appCheckToken` window of validity.\n    if (this._serverConfig.appCheckToken) {\n      validateTokenTTL(this._serverConfig.appCheckToken, 'appCheckToken');\n    }\n\n    this._finalizationRegistry = null;\n    if (typeof FinalizationRegistry !== 'undefined') {\n      this._finalizationRegistry = new FinalizationRegistry(() => {\n        this.automaticCleanup();\n      });\n    }\n\n    this._refCount = 0;\n    this.incRefCount(this._serverConfig.releaseOnDeref);\n\n    // Do not retain a hard reference to the dref object, otherwise the FinalizationRegistry\n    // will never trigger.\n    this._serverConfig.releaseOnDeref = undefined;\n    serverConfig.releaseOnDeref = undefined;\n\n    registerVersion(packageName, version, 'serverapp');\n  }\n\n  toJSON(): undefined {\n    return undefined;\n  }\n\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  // Increment the reference count of this server app. If an object is provided, register it\n  // with the finalization registry.\n  incRefCount(obj: object | undefined): void {\n    if (this.isDeleted) {\n      return;\n    }\n    this._refCount++;\n    if (obj !== undefined && this._finalizationRegistry !== null) {\n      this._finalizationRegistry.register(obj, this);\n    }\n  }\n\n  // Decrement the reference count.\n  decRefCount(): number {\n    if (this.isDeleted) {\n      return 0;\n    }\n    return --this._refCount;\n  }\n\n  // Invoked by the FinalizationRegistry callback to note that this app should go through its\n  // reference counts and delete itself if no reference count remain. The coordinating logic that\n  // handles this is in deleteApp(...).\n  private automaticCleanup(): void {\n    void deleteApp(this);\n  }\n\n  get settings(): FirebaseServerAppSettings {\n    this.checkDestroyed();\n    return this._serverConfig;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.SERVER_APP_DELETED);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseServerApp,\n  FirebaseOptions,\n  FirebaseAppSettings,\n  FirebaseServerAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\nimport {\n  _apps,\n  _components,\n  _isFirebaseApp,\n  _isFirebaseServerAppSettings,\n  _registerComponent,\n  _serverApps\n} from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport {\n  deepEqual,\n  getDefaultAppConfig,\n  isBrowser,\n  isWebWorker\n} from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @throws If the optional `name` parameter is malformed or empty.\n *\n * @throws If a `FirebaseApp` already exists with the same name but with a different configuration.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @throws If {@link FirebaseAppSettings.name} is defined but the value is malformed or empty.\n *\n * @throws If a `FirebaseApp` already exists with the same name but with a different configuration.\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: true,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseServerApp} instance.\n *\n * The `FirebaseServerApp` is similar to `FirebaseApp`, but is intended for execution in\n * server side rendering environments only. Initialization will fail if invoked from a\n * browser environment.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize an instance of `FirebaseServerApp`.\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeServerApp({\n *     apiKey: \"AIza....\",                             // Auth / General Use\n *     authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *     databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *     storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *     messagingSenderId: \"123456789\"                  // Cloud Messaging\n *   },\n *   {\n *    authIdToken: \"Your Auth ID Token\"\n *   });\n * ```\n *\n * @param options - `Firebase.AppOptions` to configure the app's services, or a\n *   a `FirebaseApp` instance which contains the `AppOptions` within.\n * @param config - Optional `FirebaseServerApp` settings.\n *\n * @returns The initialized `FirebaseServerApp`.\n *\n * @throws If invoked in an unsupported non-server environment such as a browser.\n *\n * @throws If {@link FirebaseServerAppSettings.releaseOnDeref} is defined but the runtime doesn't\n *   provide Finalization Registry support.\n *\n * @public\n */\nexport function initializeServerApp(\n  options: FirebaseOptions | FirebaseApp,\n  config?: FirebaseServerAppSettings\n): FirebaseServerApp;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseServerApp} instance.\n *\n * @param config - Optional `FirebaseServerApp` settings.\n *\n * @returns The initialized `FirebaseServerApp`.\n *\n * @throws If invoked in an unsupported non-server environment such as a browser.\n * @throws If {@link FirebaseServerAppSettings.releaseOnDeref} is defined but the runtime doesn't\n *   provide Finalization Registry support.\n * @throws If the `FIREBASE_OPTIONS` environment variable does not contain a valid project\n *   configuration required for auto-initialization.\n *\n * @public\n */\nexport function initializeServerApp(\n  config?: FirebaseServerAppSettings\n): FirebaseServerApp;\nexport function initializeServerApp(\n  _options?: FirebaseApp | FirebaseServerAppSettings | FirebaseOptions,\n  _serverAppConfig: FirebaseServerAppSettings = {}\n): FirebaseServerApp {\n  if (isBrowser() && !isWebWorker()) {\n    // FirebaseServerApp isn't designed to be run in browsers.\n    throw ERROR_FACTORY.create(AppError.INVALID_SERVER_APP_ENVIRONMENT);\n  }\n\n  let firebaseOptions: FirebaseOptions | undefined;\n  let serverAppSettings: FirebaseServerAppSettings = _serverAppConfig || {};\n\n  if (_options) {\n    if (_isFirebaseApp(_options)) {\n      firebaseOptions = _options.options;\n    } else if (_isFirebaseServerAppSettings(_options)) {\n      serverAppSettings = _options;\n    } else {\n      firebaseOptions = _options;\n    }\n  }\n\n  if (serverAppSettings.automaticDataCollectionEnabled === undefined) {\n    serverAppSettings.automaticDataCollectionEnabled = true;\n  }\n\n  firebaseOptions ||= getDefaultAppConfig();\n  if (!firebaseOptions) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  // Build an app name based on a hash of the configuration options.\n  const nameObj = {\n    ...serverAppSettings,\n    ...firebaseOptions\n  };\n\n  // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\n  // construction of FirebaseServerApp instances. For example, if the object is the request headers.\n  if (nameObj.releaseOnDeref !== undefined) {\n    delete nameObj.releaseOnDeref;\n  }\n\n  const hashCode = (s: string): number => {\n    return [...s].reduce(\n      (hash, c) => (Math.imul(31, hash) + c.charCodeAt(0)) | 0,\n      0\n    );\n  };\n\n  if (serverAppSettings.releaseOnDeref !== undefined) {\n    if (typeof FinalizationRegistry === 'undefined') {\n      throw ERROR_FACTORY.create(\n        AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED,\n        {}\n      );\n    }\n  }\n\n  const nameString = '' + hashCode(JSON.stringify(nameObj));\n  const existingApp = _serverApps.get(nameString) as FirebaseServerApp;\n  if (existingApp) {\n    (existingApp as FirebaseServerAppImpl).incRefCount(\n      serverAppSettings.releaseOnDeref\n    );\n    return existingApp;\n  }\n\n  const container = new ComponentContainer(nameString);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseServerAppImpl(\n    firebaseOptions,\n    serverAppSettings,\n    nameString,\n    container\n  );\n\n  _serverApps.set(nameString, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  let cleanupProviders = false;\n  const name = app.name;\n  if (_apps.has(name)) {\n    cleanupProviders = true;\n    _apps.delete(name);\n  } else if (_serverApps.has(name)) {\n    const firebaseServerApp = app as FirebaseServerAppImpl;\n    if (firebaseServerApp.decRefCount() <= 0) {\n      _serverApps.delete(name);\n      cleanupProviders = true;\n    }\n  }\n\n  if (cleanupProviders) {\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME);\n    const result = await tx.objectStore(STORE_NAME).get(computeKey(app));\n    // We already have the value but tx.done can throw,\n    // so we need to await it here to catch errors\n    await tx.done;\n    return result;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    await tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\nimport { logger } from './logger';\n\nconst MAX_HEADER_BYTES = 1024;\nexport const MAX_NUM_STORED_HEARTBEATS = 30;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (heartbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    try {\n      const platformLogger = this.container\n        .getProvider('platform-logger')\n        .getImmediate();\n\n      // This is the \"Firebase user agent\" string from the platform logger\n      // service, not the browser user agent.\n      const agent = platformLogger.getPlatformInfoString();\n      const date = getUTCDateString();\n      if (this._heartbeatsCache?.heartbeats == null) {\n        this._heartbeatsCache = await this._heartbeatsCachePromise;\n        // If we failed to construct a heartbeats cache, then return immediately.\n        if (this._heartbeatsCache?.heartbeats == null) {\n          return;\n        }\n      }\n      // Do not store a heartbeat if one is already stored for this day\n      // or if a header has already been sent today.\n      if (\n        this._heartbeatsCache.lastSentHeartbeatDate === date ||\n        this._heartbeatsCache.heartbeats.some(\n          singleDateHeartbeat => singleDateHeartbeat.date === date\n        )\n      ) {\n        return;\n      } else {\n        // There is no entry for this date. Create one.\n        this._heartbeatsCache.heartbeats.push({ date, agent });\n\n        // If the number of stored heartbeats exceeds the maximum number of stored heartbeats, remove the heartbeat with the earliest date.\n        // Since this is executed each time a heartbeat is pushed, the limit can only be exceeded by one, so only one needs to be removed.\n        if (\n          this._heartbeatsCache.heartbeats.length > MAX_NUM_STORED_HEARTBEATS\n        ) {\n          const earliestHeartbeatIdx = getEarliestHeartbeatIdx(\n            this._heartbeatsCache.heartbeats\n          );\n          this._heartbeatsCache.heartbeats.splice(earliestHeartbeatIdx, 1);\n        }\n      }\n\n      return this._storage.overwrite(this._heartbeatsCache);\n    } catch (e) {\n      logger.warn(e);\n    }\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    try {\n      if (this._heartbeatsCache === null) {\n        await this._heartbeatsCachePromise;\n      }\n      // If it's still null or the array is empty, there is no data to send.\n      if (\n        this._heartbeatsCache?.heartbeats == null ||\n        this._heartbeatsCache.heartbeats.length === 0\n      ) {\n        return '';\n      }\n      const date = getUTCDateString();\n      // Extract as many heartbeats from the cache as will fit under the size limit.\n      const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n        this._heartbeatsCache.heartbeats\n      );\n      const headerString = base64urlEncodeWithoutPadding(\n        JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n      );\n      // Store last sent date to prevent another being logged/sent for the same day.\n      this._heartbeatsCache.lastSentHeartbeatDate = date;\n      if (unsentEntries.length > 0) {\n        // Store any unsent entries if they exist.\n        this._heartbeatsCache.heartbeats = unsentEntries;\n        // This seems more likely than emptying the array (below) to lead to some odd state\n        // since the cache isn't empty and this will be called again on the next request,\n        // and is probably safest if we await it.\n        await this._storage.overwrite(this._heartbeatsCache);\n      } else {\n        this._heartbeatsCache.heartbeats = [];\n        // Do not wait for this, to reduce latency.\n        void this._storage.overwrite(this._heartbeatsCache);\n      }\n      return headerString;\n    } catch (e) {\n      logger.warn(e);\n      return '';\n    }\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      if (idbHeartbeatObject?.heartbeats) {\n        return idbHeartbeatObject;\n      } else {\n        return { heartbeats: [] };\n      }\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n\n/**\n * Returns the index of the heartbeat with the earliest date.\n * If the heartbeats array is empty, -1 is returned.\n */\nexport function getEarliestHeartbeatIdx(\n  heartbeats: SingleDateHeartbeat[]\n): number {\n  if (heartbeats.length === 0) {\n    return -1;\n  }\n\n  let earliestHeartbeatIdx = 0;\n  let earliestHeartbeatDate = heartbeats[0].date;\n\n  for (let i = 1; i < heartbeats.length; i++) {\n    if (heartbeats[i].date < earliestHeartbeatDate) {\n      earliestHeartbeatDate = heartbeats[i].date;\n      earliestHeartbeatIdx = i;\n    }\n  }\n\n  return earliestHeartbeatIdx;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n"]},"metadata":{},"sourceType":"module"}